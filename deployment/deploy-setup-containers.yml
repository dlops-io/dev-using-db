- name: Configure containers on app server
  hosts: appserver
  connection: ssh
  become: true

  tasks:
    # Setup secrets so containers can have access to GCP resources 
    - name: Create secrets directory
      file:
        path: "/srv/secrets"
        state: "directory"
        mode: 0755
    - name: Copy service account key file
      copy:
        src: ../secrets/gcp-service.json
        dest: "/srv/secrets/gcp-service.json"
        mode: 0644
    - name: Authenticate gcloud using service account
      shell: "gcloud auth activate-service-account --key-file /srv/secrets/gcp-service.json"
    
    # Create common network for all containers
    - name: Create network
      docker_network:
          name: "{{docker_network_name}}"
          driver: "bridge"
          attachable: "yes"

    - name: Copy docker tag file
      copy:
        src: docker-tag
        dest: .docker-tag
        mode: 0644
    - name: "Get docker tag"
      shell: "cat .docker-tag"
      register: tag
    - name: Print tag
      debug:
        var: tag

    - name: Create frontend container
      docker_container:
        name: "frontend"
        image: "gcr.io/{{ gcp_project }}/dev-using-db-frontend:{{ tag.stdout}}"
        state: started
        recreate: yes
        pull: yes
        restart: yes
        published_ports:
          - 3000:80
        networks:
          - name: "{{docker_network_name}}"

    - name: Copy db migration scripts
      copy:
        src: "../database-server/db"
        dest: "/conf"

    - name: Run DB migrations using dbmate
      shell: docker run --rm -it -v /conf/db:/db -e DATABASE_URL=postgres://postgres:welcome123@10.85.192.5/dev-using-db?sslmode=disable amacneil/dbmate up

    - name: Create api-service container
      docker_container:
        name: "api-service"
        image: "gcr.io/{{ gcp_project }}/dev-using-db-api-service:{{ tag.stdout}}"
        state: started
        recreate: yes
        published_ports:
          - 9000:9000
        env:
          DATABASE_URL: "postgres://postgres:welcome123@10.85.192.5/dev-using-db"
        networks:
          - name: "{{docker_network_name}}"
  
    - name: Check if containers are running
      shell: docker ps
    
    - name: "Remove all unused containers"
      shell: docker system prune -a -f